import cv2
import numpy as np
import tkinter as tk
from tkinter import filedialog

def cartoonize_image(img):
    numDownSamples = 2       # number of downscaling steps
    numBilateralFilters = 7  # number of bilateral filtering steps

    # -- STEP 1 --
    # downsample image using Gaussian pyramid
    img_color = img
    for _ in range(numDownSamples):
        img_color = cv2.pyrDown(img_color)
    
    # -- STEP 2 --
    # apply bilateral filter to downsampled image
    for i in range(numBilateralFilters):
        img_color = cv2.bilateralFilter(img_color, 9, 9, 7)
    
    # -- STEP 3 --
    # upsample image to original size
    for _ in range(numDownSamples):
        img_color = cv2.pyrUp(img_color)
    
    # -- STEP 4 --
    # convert to grayscale and apply median blur
    img_gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    img_blur = cv2.medianBlur(img_gray, 3)
    
    # -- STEP 5 --
    # detect and enhance edges
    img_edge = cv2.adaptiveThreshold(img_blur, 255,
        cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 9, 2)
    
    # -- STEP 6 --
    # convert back to color so that it can be bit-ANDed with color image
    (x,y,z) = img_color.shape
    img_edge = cv2.resize(img_edge, (y,x)) 
    img_edge = np.dstack((img_edge, img_edge, img_edge)) 
    
    # -- STEP 7 --
    # bit-AND edge mask with color image
    img_cartoon = cv2.bitwise_and(img_color, img_edge)
    
    return img_cartoon

# Choose input file
root = tk.Tk()
root.withdraw()
file_path = filedialog.askopenfilename(title = "Select Image File", filetypes = (("JPEG files", "*.jpg"), ("All files", "*.*")))

# Read image
img = cv2.imread(file_path)

# Cartoonize image
img_cartoon = cartoonize_image(img)

# Choose output file
file_path = filedialog.asksaveasfilename(title = "Save Cartoonized Image", defaultextension = ".jpg", filetypes = (("JPEG files", "*.jpg"), ("All files", "*.*")))

# Save output
cv2.imwrite(file_path, img_cartoon)
